<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 * @codingStandardsIgnoreFile
 */


namespace Ls\Omni\Client\Ecommerce\Entity;

use Ls\Omni\Client\Ecommerce\Entity\Enum\HierarchyModifierPriceType;
use Ls\Omni\Client\Ecommerce\Entity\Enum\HierarchyModifierType;
use Ls\Omni\Exception\InvalidEnumException;

class ReplHierarchyHospModifier
{

    /**
     * @property boolean $AlwaysCharge
     */
    protected $AlwaysCharge = null;

    /**
     * @property float $AmountPercent
     */
    protected $AmountPercent = null;

    /**
     * @property string $Code
     */
    protected $Code = null;

    /**
     * @property string $Description
     */
    protected $Description = null;

    /**
     * @property string $HierarchyCode
     */
    protected $HierarchyCode = null;

    /**
     * @property boolean $IsDeleted
     */
    protected $IsDeleted = null;

    /**
     * @property string $ItemNo
     */
    protected $ItemNo = null;

    /**
     * @property int $MaxSelection
     */
    protected $MaxSelection = null;

    /**
     * @property int $MinSelection
     */
    protected $MinSelection = null;

    /**
     * @property string $ParentItem
     */
    protected $ParentItem = null;

    /**
     * @property string $ParentNode
     */
    protected $ParentNode = null;

    /**
     * @property HierarchyModifierPriceType $PriceType
     */
    protected $PriceType = null;

    /**
     * @property string $SubCode
     */
    protected $SubCode = null;

    /**
     * @property HierarchyModifierType $Type
     */
    protected $Type = null;

    /**
     * @property string $UnitOfMeasure
     */
    protected $UnitOfMeasure = null;

    /**
     * @property string $scope
     */
    protected $scope = null;

    /**
     * @property int $scope_id
     */
    protected $scope_id = null;

    /**
     * @param boolean $AlwaysCharge
     * @return $this
     */
    public function setAlwaysCharge($AlwaysCharge)
    {
        $this->AlwaysCharge = $AlwaysCharge;
        return $this;
    }

    /**
     * @return boolean
     */
    public function getAlwaysCharge()
    {
        return $this->AlwaysCharge;
    }

    /**
     * @param float $AmountPercent
     * @return $this
     */
    public function setAmountPercent($AmountPercent)
    {
        $this->AmountPercent = $AmountPercent;
        return $this;
    }

    /**
     * @return float
     */
    public function getAmountPercent()
    {
        return $this->AmountPercent;
    }

    /**
     * @param string $Code
     * @return $this
     */
    public function setCode($Code)
    {
        $this->Code = $Code;
        return $this;
    }

    /**
     * @return string
     */
    public function getCode()
    {
        return $this->Code;
    }

    /**
     * @param string $Description
     * @return $this
     */
    public function setDescription($Description)
    {
        $this->Description = $Description;
        return $this;
    }

    /**
     * @return string
     */
    public function getDescription()
    {
        return $this->Description;
    }

    /**
     * @param string $HierarchyCode
     * @return $this
     */
    public function setHierarchyCode($HierarchyCode)
    {
        $this->HierarchyCode = $HierarchyCode;
        return $this;
    }

    /**
     * @return string
     */
    public function getHierarchyCode()
    {
        return $this->HierarchyCode;
    }

    /**
     * @param boolean $IsDeleted
     * @return $this
     */
    public function setIsDeleted($IsDeleted)
    {
        $this->IsDeleted = $IsDeleted;
        return $this;
    }

    /**
     * @return boolean
     */
    public function getIsDeleted()
    {
        return $this->IsDeleted;
    }

    /**
     * @param string $ItemNo
     * @return $this
     */
    public function setItemNo($ItemNo)
    {
        $this->ItemNo = $ItemNo;
        return $this;
    }

    /**
     * @return string
     */
    public function getItemNo()
    {
        return $this->ItemNo;
    }

    /**
     * @param int $MaxSelection
     * @return $this
     */
    public function setMaxSelection($MaxSelection)
    {
        $this->MaxSelection = $MaxSelection;
        return $this;
    }

    /**
     * @return int
     */
    public function getMaxSelection()
    {
        return $this->MaxSelection;
    }

    /**
     * @param int $MinSelection
     * @return $this
     */
    public function setMinSelection($MinSelection)
    {
        $this->MinSelection = $MinSelection;
        return $this;
    }

    /**
     * @return int
     */
    public function getMinSelection()
    {
        return $this->MinSelection;
    }

    /**
     * @param string $ParentItem
     * @return $this
     */
    public function setParentItem($ParentItem)
    {
        $this->ParentItem = $ParentItem;
        return $this;
    }

    /**
     * @return string
     */
    public function getParentItem()
    {
        return $this->ParentItem;
    }

    /**
     * @param string $ParentNode
     * @return $this
     */
    public function setParentNode($ParentNode)
    {
        $this->ParentNode = $ParentNode;
        return $this;
    }

    /**
     * @return string
     */
    public function getParentNode()
    {
        return $this->ParentNode;
    }

    /**
     * @param HierarchyModifierPriceType|string $PriceType
     * @return $this
     * @throws InvalidEnumException
     */
    public function setPriceType($PriceType)
    {
        if ( ! $PriceType instanceof HierarchyModifierPriceType ) {
            if ( HierarchyModifierPriceType::isValid( $PriceType ) )
                $PriceType = new HierarchyModifierPriceType( $PriceType );
            elseif ( HierarchyModifierPriceType::isValidKey( $PriceType ) )
                $PriceType = new HierarchyModifierPriceType( constant( "HierarchyModifierPriceType::$PriceType" ) );
            elseif ( ! $PriceType instanceof HierarchyModifierPriceType )
                throw new InvalidEnumException();
        }
        $this->PriceType = $PriceType->getValue();

        return $this;
    }

    /**
     * @return HierarchyModifierPriceType
     */
    public function getPriceType()
    {
        return $this->PriceType;
    }

    /**
     * @param string $SubCode
     * @return $this
     */
    public function setSubCode($SubCode)
    {
        $this->SubCode = $SubCode;
        return $this;
    }

    /**
     * @return string
     */
    public function getSubCode()
    {
        return $this->SubCode;
    }

    /**
     * @param HierarchyModifierType|string $Type
     * @return $this
     * @throws InvalidEnumException
     */
    public function setType($Type)
    {
        if ( ! $Type instanceof HierarchyModifierType ) {
            if ( HierarchyModifierType::isValid( $Type ) )
                $Type = new HierarchyModifierType( $Type );
            elseif ( HierarchyModifierType::isValidKey( $Type ) )
                $Type = new HierarchyModifierType( constant( "HierarchyModifierType::$Type" ) );
            elseif ( ! $Type instanceof HierarchyModifierType )
                throw new InvalidEnumException();
        }
        $this->Type = $Type->getValue();

        return $this;
    }

    /**
     * @return HierarchyModifierType
     */
    public function getType()
    {
        return $this->Type;
    }

    /**
     * @param string $UnitOfMeasure
     * @return $this
     */
    public function setUnitOfMeasure($UnitOfMeasure)
    {
        $this->UnitOfMeasure = $UnitOfMeasure;
        return $this;
    }

    /**
     * @return string
     */
    public function getUnitOfMeasure()
    {
        return $this->UnitOfMeasure;
    }

    /**
     * @param string $scope
     * @return $this
     */
    public function setScope($scope)
    {
        $this->scope = $scope;
        return $this;
    }

    /**
     * @return string
     */
    public function getScope()
    {
        return $this->scope;
    }

    /**
     * @param int $scope_id
     * @return $this
     */
    public function setScopeId($scope_id)
    {
        $this->scope_id = $scope_id;
        return $this;
    }

    /**
     * @return int
     */
    public function getScopeId()
    {
        return $this->scope_id;
    }


}

